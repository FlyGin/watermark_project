# gui/events.py
# ============================================================================
# –§–ê–ô–õ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–ë–´–¢–ò–ô –ò –õ–û–ì–ò–ö–ò –†–ê–ë–û–¢–´ –ü–†–û–ì–†–ê–ú–ú–´
# ============================================================================
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
# - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
# - –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
# - –ê–ª–≥–æ—Ä–∏—Ç–º—ã –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
# - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#
# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø: –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
# —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤ PyQt5 (connect_events)
# ============================================================================

from PyQt5.QtWidgets import QFileDialog, QMessageBox, QDialog, QVBoxLayout, QTextEdit, QHBoxLayout, QPushButton, QLabel, QTabWidget, QWidget
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
from PIL import Image      # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
import numpy as np         # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã –ø–∏–∫—Å–µ–ª–µ–π)
import cv2                 # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ OpenCV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import os                  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from watermark.embedding import embed      # –ù–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
from watermark.extraction import extract   # –ù–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
from utils.image_metrics import calculate_image_metrics, format_metrics as format_image_metrics
from utils.text_metrics import calculate_text_metrics, format_metrics as format_text_metrics

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê
# ============================================================================

def get_quality_description(metrics):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ.
    
    –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –æ—Ü–µ–Ω–∫–∞ –ø–æ PSNR –∏ SSIM
    –î–ª—è —Ç–µ–∫—Å—Ç–∞: –æ—Ü–µ–Ω–∫–∞ –ø–æ accuracy –∏ similarity
    """
    if 'psnr' in metrics:  # –ú–µ—Ç—Ä–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        psnr = metrics['psnr']
        ssim = metrics['ssim']
        
        if psnr == float('inf'):
            return "‚úÖ –û—Ç–ª–∏—á–Ω–æ (–∏–¥–µ–Ω—Ç–∏—á–Ω—ã, PSNR=‚àû)"
        elif psnr >= 40:
            return f"‚úÖ –û—Ç–ª–∏—á–Ω–æ (PSNR={psnr:.2f} –¥–ë, SSIM={ssim:.4f})"
        elif psnr >= 30:
            return f"‚úÖ –•–æ—Ä–æ—à–æ (PSNR={psnr:.2f} –¥–ë, SSIM={ssim:.4f})"
        elif psnr >= 20:
            return f"‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (PSNR={psnr:.2f} –¥–ë, SSIM={ssim:.4f})"
        else:
            return f"‚ùå –ù–∏–∑–∫–æ–µ (PSNR={psnr:.2f} –¥–ë, SSIM={ssim:.4f})"
    
    elif 'accuracy' in metrics:  # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
        accuracy = metrics['accuracy']
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ calculate_text_metrics()
        similarity = metrics.get('similarity_ratio', metrics.get('similarity', 0)) * 100
        
        if accuracy >= 99.9:
            return f"‚úÖ –û—Ç–ª–∏—á–Ω–æ (–¢–æ—á–Ω–æ—Å—Ç—å={accuracy:.2f}%, –°—Ö–æ–∂–µ—Å—Ç—å={similarity:.2f}%)"
        elif accuracy >= 95:
            return f"‚úÖ –•–æ—Ä–æ—à–æ (–¢–æ—á–Ω–æ—Å—Ç—å={accuracy:.2f}%, –°—Ö–æ–∂–µ—Å—Ç—å={similarity:.2f}%)"
        elif accuracy >= 80:
            return f"‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (–¢–æ—á–Ω–æ—Å—Ç—å={accuracy:.2f}%, –°—Ö–æ–∂–µ—Å—Ç—å={similarity:.2f}%)"
        else:
            return f"‚ùå –ù–∏–∑–∫–æ–µ (–¢–æ—á–Ω–æ—Å—Ç—å={accuracy:.2f}%, –°—Ö–æ–∂–µ—Å—Ç—å={similarity:.2f}%)"
    
    return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def connect_events(parent):
    """
    ========================================================================
    –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
    ========================================================================
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã PyQt5:
    - widget.clicked.connect(function) - —Å–≤—è–∑—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
    - lambda - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é
    ========================================================================
    """
    # –°–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
    parent.btn_load_cover.clicked.connect(lambda: load_cover_file(parent))
    parent.btn_load_wm.clicked.connect(lambda: load_wm_file(parent))
    parent.btn_embed.clicked.connect(lambda: embed_watermark(parent))
    parent.btn_extract.clicked.connect(lambda: extract_watermark(parent))
    parent.btn_save_result.clicked.connect(lambda: save_stego_result(parent))
    parent.btn_save_secret.clicked.connect(lambda: save_extracted_secret(parent))
    parent.btn_reset.clicked.connect(lambda: reset_gui(parent))
    parent.btn_show_metrics.clicked.connect(lambda: show_metrics_dialog(parent))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    parent.combo_algo.currentTextChanged.connect(lambda: on_algorithm_changed(parent))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–µ–≤—å—é —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    parent.secret_image_label.mousePressEvent = lambda event: on_secret_preview_clicked(parent, event)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–µ–≤—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
    parent.restored_image_label.mousePressEvent = lambda event: on_restored_secret_preview_clicked(parent, event)

import tempfile

def show_metrics_dialog(parent):
    """
    ========================================================================
    –ü–û–ö–ê–ó –î–ò–ê–õ–û–ì–ê –° –ü–û–î–†–û–ë–ù–´–ú–ò –ú–ï–¢–†–ò–ö–ê–ú–ò
    ========================================================================
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ç—Ä–∏–∫–∞—Ö –∫–∞—á–µ—Å—Ç–≤–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏:
    1. –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å—Ö–æ–¥–Ω–æ–µ vs —Å—Ç–µ–≥–æ)
    2. –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π vs –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π)
    ========================================================================
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç—Ä–∏–∫
    if not hasattr(parent, 'stego_metrics') and not hasattr(parent, 'secret_metrics'):
        QMessageBox.information(parent, "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", 
                               "–ú–µ—Ç—Ä–∏–∫–∏ –µ—â—ë –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ.")
        return
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
    dialog = QDialog(parent)
    dialog.setWindowTitle("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    dialog.setMinimumSize(700, 500)
    
    layout = QVBoxLayout(dialog)
    
    # –°–æ–∑–¥–∞—ë–º –≤–∫–ª–∞–¥–∫–∏
    tabs = QTabWidget()
    
    # –í–∫–ª–∞–¥–∫–∞ 1: –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if hasattr(parent, 'stego_metrics'):
        stego_tab = QWidget()
        stego_layout = QVBoxLayout(stego_tab)
        
        stego_label = QLabel("üñºÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ vs –°—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        stego_label.setStyleSheet("font-weight: bold; font-size: 12pt; color: #2196F3; padding: 5px;")
        stego_layout.addWidget(stego_label)
        
        stego_text = QTextEdit()
        stego_text.setReadOnly(True)
        stego_text.setText(parent.stego_metrics)
        stego_text.setStyleSheet("font-family: Consolas, monospace; font-size: 10pt;")
        stego_layout.addWidget(stego_text)
        
        tabs.addTab(stego_tab, "üñºÔ∏è –°—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    # –í–∫–ª–∞–¥–∫–∞ 2: –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
    if hasattr(parent, 'secret_metrics'):
        secret_tab = QWidget()
        secret_layout = QVBoxLayout(secret_tab)
        
        secret_label = QLabel("üîê –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç vs –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç")
        secret_label.setStyleSheet("font-weight: bold; font-size: 12pt; color: #4CAF50; padding: 5px;")
        secret_layout.addWidget(secret_label)
        
        secret_text = QTextEdit()
        secret_text.setReadOnly(True)
        secret_text.setText(parent.secret_metrics)
        secret_text.setStyleSheet("font-family: Consolas, monospace; font-size: 10pt;")
        secret_layout.addWidget(secret_text)
        
        tabs.addTab(secret_tab, "üîê –°–µ–∫—Ä–µ—Ç")
    
    layout.addWidget(tabs)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    btn_layout = QHBoxLayout()
    btn_layout.addStretch()
    btn_close = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
    btn_close.clicked.connect(dialog.close)
    btn_close.setMinimumWidth(100)
    btn_layout.addWidget(btn_close)
    layout.addLayout(btn_layout)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    dialog.exec_()

def on_algorithm_changed(parent):
    """
    ========================================================================
    –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ú–ï–ù–´ –ê–õ–ì–û–†–ò–¢–ú–ê
    ========================================================================
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ combo_algo.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
    
    LSB –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: depth (–≥–ª—É–±–∏–Ω–∞)
    DCT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: strength (—Å–∏–ª–∞), block_size (—Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞)
    ========================================================================
    """
    algorithm = parent.combo_algo.currentText()
    
    if algorithm == "LSB":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã LSB
        parent.label_depth.setVisible(True)
        parent.spinbox_depth.setVisible(True)
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DCT
        parent.label_strength.setVisible(False)
        parent.spinbox_strength.setVisible(False)
        parent.label_block_size.setVisible(False)
        parent.spinbox_block_size.setVisible(False)
    elif algorithm == "DCT":
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã LSB
        parent.label_depth.setVisible(False)
        parent.spinbox_depth.setVisible(False)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DCT
        parent.label_strength.setVisible(True)
        parent.spinbox_strength.setVisible(True)
        parent.label_block_size.setVisible(True)
        parent.spinbox_block_size.setVisible(True)

def on_restored_secret_preview_clicked(parent, event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ QLabel –ø—Ä–µ–≤—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞.
    –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç ‚Äî —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π txt-—Ñ–∞–π–ª –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç.
    """
    secret = getattr(parent, "extracted_secret", None)
    secret_type = getattr(parent, "embedded_secret_type", None)
    if secret_type == "text" and secret:
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".txt", mode="w", encoding="utf-8") as tmp:
                tmp.write(secret)
                tmp_path = tmp.name
            import sys
            if sys.platform.startswith('win'):
                os.startfile(tmp_path)
            elif sys.platform.startswith('darwin'):
                import subprocess
                subprocess.call(['open', tmp_path])
            else:
                import subprocess
                subprocess.call(['xdg-open', tmp_path])
        except Exception as e:
            QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")

def on_secret_preview_clicked(parent, event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ QLabel –ø—Ä–µ–≤—å—é —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–∫—Ä–µ—Ç —Ç–∏–ø–∞ —Ç–µ–∫—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, QMessageBox).
    """
    import subprocess
    import sys
    secret_type = getattr(parent, "secret_type", None)
    wm_path = getattr(parent, "wm_path", None)
    if secret_type == "text" and wm_path:
        try:
            if sys.platform.startswith('win'):
                os.startfile(wm_path)
            elif sys.platform.startswith('darwin'):
                subprocess.call(['open', wm_path])
            else:
                subprocess.call(['xdg-open', wm_path])
        except Exception as e:
            QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")

def on_text_input_changed(parent, text):
    """
    ========================================================================
    –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê –í –ü–û–õ–ï –í–í–û–î–ê –°–ï–ö–†–ï–¢–ê
    ========================================================================
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç
    –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    
    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    - –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω"
    - –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
    - –ü—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    ========================================================================
    """
    if text.strip():  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç (–Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
        parent.secret_image_label.clear()
        parent.secret_image_label.setText("üí¨ –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω")
        parent.secret_image_label.setStyleSheet("border: 2px solid #FF9800; color: #FF9800;")  # –û—Ä–∞–Ω–∂–µ–≤–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
        # –û—á–∏—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(parent, 'wm_path'):
            delattr(parent, 'wm_path')
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        parent.secret_image_label.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        parent.secret_image_label.setStyleSheet("border: 2px dashed #aaa; color: #666;")

def load_and_display_image(image_path, label_widget, max_size=(250, 200)):
    """
    ========================================================================
    –ó–ê–ì–†–£–ó–ö–ê –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –û–ö–ù–ï –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê
    ========================================================================
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º
    –≤–∏–¥–∂–µ—Ç–µ QLabel —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - image_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    - label_widget: –≤–∏–¥–∂–µ—Ç QLabel –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    - max_size: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - True: –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    - False: –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB —Ñ–æ—Ä–º–∞—Ç
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º LANCZOS
    ========================================================================
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ PIL
        pil_image = Image.open(image_path)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if pil_image.mode != 'RGB':
            pil_image = pil_image.convert('RGB')
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ QPixmap –¥–ª—è PyQt5
        import io
        img_buffer = io.BytesIO()
        pil_image.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        pixmap = QPixmap()
        pixmap.loadFromData(img_buffer.getvalue())
        label_widget.setPixmap(pixmap)
        label_widget.setStyleSheet("border: 2px solid #4CAF50;")  # –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False

def load_cover_file(parent):
    """
    ========================================================================
    –ó–ê–ì–†–£–ó–ö–ê –ò–°–•–û–î–ù–û–ì–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–ö–û–ù–¢–ï–ô–ù–ï–†–ê)
    ========================================================================
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ".
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    
    –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
    1. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    2. –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ parent.cover_path
    3. –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    4. –í—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤ –æ–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    ========================================================================
    """
    fname, _ = QFileDialog.getOpenFileName(parent, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª", "", "Images (*.png *.jpg *.bmp *.jpeg);;All Files (*)")
    if fname:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–∞–π–ª (–Ω–µ –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞")
        parent.cover_path = fname  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        parent.result_text.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {fname}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if load_and_display_image(fname, parent.cover_image_label):
            parent.result_text.append("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            parent.result_text.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def load_wm_file(parent):
    """
    ========================================================================
    –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê –í–û–î–Ø–ù–û–ì–û –ó–ù–ê–ö–ê (–°–ï–ö–†–ï–¢–ù–´–• –î–ê–ù–ù–´–•)
    ========================================================================
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞".
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤:
    - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG, BMP) - –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (TXT) - –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    
    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    1. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–∏—Å–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç)
    3. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    4. –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    5. –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    ========================================================================
    """
    fname, _ = QFileDialog.getOpenFileName(parent, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞", "", "Images (*.png *.jpg *.bmp);;Text files (*.txt);;All Files (*)")
    if fname:
        parent.wm_path = fname
        parent.result_text.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {fname}")
        ext = os.path.splitext(fname)[1].lower()
        if ext in [".jpg", ".jpeg", ".png", ".bmp"]:
            if load_and_display_image(fname, parent.secret_image_label):
                parent.result_text.append("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω")
            else:
                parent.result_text.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            parent.secret_type = "image"
        elif ext == ".txt":
            parent.secret_image_label.clear()
            parent.secret_image_label.setText("üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è")
            parent.secret_image_label.setStyleSheet("border: 2px solid #2196F3; color: #2196F3;")
            parent.secret_type = "text"
            parent.result_text.append("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
        else:
            parent.secret_image_label.clear()
            parent.secret_image_label.setText("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            parent.secret_image_label.setStyleSheet("border: 2px dashed #aaa; color: #666;")
            parent.secret_type = None

def embed_watermark(parent):
    """
    ========================================================================
    –í–°–¢–†–ê–ò–í–ê–ù–ò–ï –í–û–î–Ø–ù–û–ì–û –ó–ù–ê–ö–ê –í –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï
    ========================================================================
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã! –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏–∏.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–µ–∫—Ä–µ—Ç–æ–≤:
    - –¢–µ–∫—Å—Ç (–≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤ –ø–æ–ª–µ –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞)
    - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–∑ —Ñ–∞–π–ª–∞ PNG/JPG/BMP)
    
    –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å—Ç—å –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–µ–∫—Ä–µ—Ç)
    2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ–∫—Ä–µ—Ç–∞ –∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    4. –í—ã–∑–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
    5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
    6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    ========================================================================
    """
    # ========================================================================
    # –≠–¢–ê–ü 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    # ========================================================================
    
    cover_path = getattr(parent, "cover_path", None)
    wm_path = getattr(parent, "wm_path", None)
    secret_type = getattr(parent, "secret_type", None)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if not cover_path:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª.")
        return
    if not wm_path or not secret_type:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ (—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç).")
        return
    try:
        # ====================================================================
        # –≠–¢–ê–ü 2: –ó–ê–ì–†–£–ó–ö–ê –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•
        # ====================================================================
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –ø–∏–∫—Å–µ–ª–µ–π
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å RGBA
        cover = np.array(Image.open(cover_path).convert('RGB'))
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        algorithm = parent.combo_algo.currentText().lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if algorithm == "lsb":
            depth = parent.spinbox_depth.value()  # –ì–ª—É–±–∏–Ω–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (1-8 –±–∏—Ç)
            params = {"depth": depth}
        elif algorithm == "dct":
            strength = parent.spinbox_strength.value()  # –°–∏–ª–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (5-50)
            block_size = parent.spinbox_block_size.value()  # –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ (4-16)
            params = {"strength": strength, "block_size": block_size}
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")

        # ====================================================================
        # –≠–¢–ê–ü 3: –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –°–ï–ö–†–ï–¢–ê –ò –ï–ì–û –û–ë–†–ê–ë–û–¢–ö–ê
        # ====================================================================
        
        if secret_type == "text":
            # –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
            encodings = ['utf-8', 'cp1251', 'latin-1']
            secret = None
            used_encoding = None
            
            for encoding in encodings:
                try:
                    with open(wm_path, 'r', encoding=encoding) as f:
                        secret = f.read()
                    used_encoding = encoding
                    break
                except (UnicodeDecodeError, UnicodeError):
                    continue
            
            # latin-1 –¥–æ–ª–∂–Ω–∞ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å (—á–∏—Ç–∞–µ—Ç –ª—é–±—ã–µ –±–∞–π—Ç—ã 0-255)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π (—á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å latin-1)
            if secret is None:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á–∏—Ç–∞–µ–º –∫–∞–∫ latin-1 –Ω–∞–ø—Ä—è–º—É—é
                with open(wm_path, 'r', encoding='latin-1') as f:
                    secret = f.read()
                used_encoding = 'latin-1'
                parent.result_text.append(f"‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π latin-1 (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)")
            else:
                parent.result_text.append(f"‚ÑπÔ∏è –¢–µ–∫—Å—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {used_encoding}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            parent.embedded_text_encoding = used_encoding
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            if not secret.strip():
                raise ValueError("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç (–¥–ª—è GUI –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            text_size_bytes = len(secret.encode("utf-8"))
            if text_size_bytes > 10000:  # 10 KB
                parent.result_text.append(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç ({text_size_bytes} –±–∞–π—Ç). –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ë–º–∫–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            h, w = cover.shape[:2]
            if algorithm == "lsb":
                # –î–ª—è LSB: capacity = w * h * channels * depth / 8
                channels = 3 if len(cover.shape) == 3 else 1
                capacity_bits = w * h * channels * depth
                capacity_bytes = capacity_bits // 8
            elif algorithm == "dct":
                # –î–ª—è DCT: capacity = (w // block_size) * (h // block_size) –±–∏—Ç
                capacity_bits = (w // block_size) * (h // block_size)
                capacity_bytes = capacity_bits // 8
            
            required_bytes = text_size_bytes
            
            if required_bytes > capacity_bytes:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                if algorithm == "lsb":
                    min_pixels = required_bytes * 8 // (channels * depth)
                    min_side = int(np.sqrt(min_pixels)) + 1
                elif algorithm == "dct":
                    min_blocks = required_bytes * 8
                    min_side = int(np.sqrt(min_blocks)) * block_size + block_size
                
                error_msg = (
                    f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!\n\n"
                    f"–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {w}√ó{h}\n"
                    f"–Å–º–∫–æ—Å—Ç—å: {capacity_bytes} –±–∞–π—Ç ({capacity_bits} –±–∏—Ç)\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {required_bytes} –±–∞–π—Ç ({required_bytes * 8} –±–∏—Ç)\n\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    f"1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∏–Ω–∏–º—É–º {min_side}√ó{min_side}\n"
                    f"2. –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ (—Å–µ–π—á–∞—Å {text_size_bytes} –±–∞–π—Ç)\n"
                )
                
                if algorithm == "dct":
                    error_msg += f"3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LSB –∞–ª–≥–æ—Ä–∏—Ç–º (–≤—ã—à–µ —ë–º–∫–æ—Å—Ç—å)\n"
                elif algorithm == "lsb" and depth < 8:
                    error_msg += f"3. –£–≤–µ–ª–∏—á—å—Ç–µ –≥–ª—É–±–∏–Ω—É –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (—Å–µ–π—á–∞—Å {depth})\n"
                
                QMessageBox.warning(parent, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —ë–º–∫–æ—Å—Ç—å", error_msg)
                parent.result_text.append(f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: —Ç—Ä–µ–±—É–µ—Ç—Å—è {required_bytes} –±–∞–π—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ {capacity_bytes} –±–∞–π—Ç")
                return
            
            parent.embedded_secret_type = "text"
            parent.embedded_secret_length = text_size_bytes
            parent.original_secret = secret  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫
            if algorithm == "lsb":
                parent.embedded_depth = depth
            elif algorithm == "dct":
                parent.embedded_strength = strength
                parent.embedded_block_size = block_size
        elif secret_type == "image":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            secret = np.array(Image.open(wm_path).convert('RGB'))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ë–º–∫–æ—Å—Ç–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è LSB, –¥–ª—è DCT –µ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ)
            if algorithm == "lsb":
                h, w = cover.shape[:2]
                channels = 3 if len(cover.shape) == 3 else 1
                capacity_bits = w * h * channels * depth
                capacity_bytes = capacity_bits // 8
                
                required_bytes = secret.size
                
                if required_bytes > capacity_bytes:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    min_pixels = required_bytes * 8 // (channels * depth)
                    min_side = int(np.sqrt(min_pixels)) + 1
                    
                    error_msg = (
                        f"–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!\n\n"
                        f"–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {w}√ó{h}\n"
                        f"–Å–º–∫–æ—Å—Ç—å: {capacity_bytes} –±–∞–π—Ç\n"
                        f"–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {secret.shape}\n"
                        f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {required_bytes} –±–∞–π—Ç\n\n"
                        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                        f"1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∏–Ω–∏–º—É–º {min_side}√ó{min_side}\n"
                        f"2. –£–º–µ–Ω—å—à–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                        f"3. –£–≤–µ–ª–∏—á—å—Ç–µ –≥–ª—É–±–∏–Ω—É –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (—Å–µ–π—á–∞—Å {depth})\n"
                        f"4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DCT —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
                    )
                    
                    QMessageBox.warning(parent, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —ë–º–∫–æ—Å—Ç—å", error_msg)
                    parent.result_text.append(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è {required_bytes} –±–∞–π—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ {capacity_bytes} –±–∞–π—Ç")
                    return
            
            parent.embedded_secret_type = "image"
            parent.embedded_secret_shape = secret.shape  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            parent.embedded_original_secret_shape = secret.shape  # –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            parent.original_secret = secret.copy()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫
            if algorithm == "lsb":
                parent.embedded_depth = depth
            elif algorithm == "dct":
                parent.embedded_strength = strength
                parent.embedded_block_size = block_size

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        parent.embedded_algorithm = algorithm

        # ====================================================================
        # –≠–¢–ê–ü 4: –í–°–¢–†–ê–ò–í–ê–ù–ò–ï –°–ï–ö–†–ï–¢–ê –í –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï
        # ====================================================================
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
        import sys
        from io import StringIO
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        
        # –í—ã–∑—ã–≤–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (–∏–∑ –º–æ–¥—É–ª—è watermark.embedding)
        result = embed(cover, secret, params, method=algorithm)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥ –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ (–µ—Å–ª–∏ –±—ã–ª–æ)
        output = sys.stdout.getvalue()
        sys.stdout = old_stdout
        
        # –ï—Å–ª–∏ –±—ã–ª–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if output:
            parent.result_text.append(output.strip())
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ñ–æ—Ä–º—É —Å–µ–∫—Ä–µ—Ç–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é (–ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è)
            if secret_type == "image" and algorithm == "dct":
                # –ü–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å embedded_secret_shape
                # –ü–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—ã–≤–æ–¥–∞
                import re
                match = re.search(r'‚Üí \(([^)]+)\)', output)
                if match:
                    shape_str = match.group(1)
                    shape_parts = [int(x.strip()) for x in shape_str.split(',')]
                    parent.embedded_secret_shape = tuple(shape_parts)
                    parent.result_text.append(f"‚ÑπÔ∏è –†–∞–∑–º–µ—Ä –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {parent.embedded_secret_shape}")
        
        # ====================================================================
        # –≠–¢–ê–ü 5: –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        # ====================================================================
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–µ–≥–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        parent.stego_result = result
        parent.result_text.append(f"‚úÖ –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        parent.btn_save_result.setEnabled(True)
        
        # ====================================================================
        # –≠–¢–ê–ü 5.1: –†–ê–°–ß–Å–¢ –ú–ï–¢–†–ò–ö –î–õ–Ø –°–¢–ï–ì–û–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        # ====================================================================
        
        try:
            # –†–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ (–∏—Å—Ö–æ–¥–Ω–æ–µ vs —Å—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            stego_metrics = calculate_image_metrics(cover, result)
            formatted_stego_metrics = format_image_metrics(stego_metrics)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
            parent.stego_metrics = formatted_stego_metrics
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É (–æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞)
            quality_desc = get_quality_description(stego_metrics)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
            parent.metrics_summary_text.clear()
            parent.metrics_summary_text.append(f"üñºÔ∏è –°—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {quality_desc}")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            parent.btn_show_metrics.setEnabled(True)
            
            parent.result_text.append("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
        except Exception as metrics_error:
            parent.result_text.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {metrics_error}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        img = Image.fromarray(result)
        import io
        buf = io.BytesIO()
        img.save(buf, format='PNG')
        buf.seek(0)
        pixmap = QPixmap()
        pixmap.loadFromData(buf.getvalue())
        parent.stego_image_label.setPixmap(pixmap)
        parent.stego_image_label.setStyleSheet("border: 2px solid #4CAF50;")
        
    except Exception as exc:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –Ω–µ—Ö–≤–∞—Ç–∫–∞ –º–µ—Å—Ç–∞ –∏ —Ç.–¥.)
        parent.result_text.append(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è: {exc}")
        

def extract_watermark(parent):
    """
    ========================================================================
    –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –í–û–î–Ø–ù–û–ì–û –ó–ù–ê–ö–ê –ò–ó –°–¢–ï–ì–û-–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
    ========================================================================
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–≥–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ
    —Ñ—É–Ω–∫—Ü–∏–µ–π embed_watermark().
    
    –í–∞–∂–Ω–æ: –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ
    –≤—Å—Ç—Ä–æ–µ–Ω–æ (—Ç–∏–ø —Å–µ–∫—Ä–µ—Ç–∞, —Ä–∞–∑–º–µ—Ä, –≥–ª—É–±–∏–Ω–∞). –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–∏.
    
    –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–µ–≥–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    2. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–µ–≥–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    4. –í—ã–∑–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    5. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    ========================================================================
    """
    # ========================================================================
    # –≠–¢–ê–ü 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø
    # ========================================================================
    
    # –ò—â–µ–º —Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ stego_result.png, –ø–æ—Ç–æ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    stego_result = getattr(parent, "stego_result", None)
    secret_type = getattr(parent, "embedded_secret_type", None)
    if stego_result is None or not secret_type:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Å—Ç–µ–≥–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.")
        return
    try:
        # ====================================================================
        # –≠–¢–ê–ü 2: –ó–ê–ì–†–£–ó–ö–ê –°–¢–ï–ì–û-–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        # ====================================================================
        stego_image = stego_result
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        algorithm = getattr(parent, "embedded_algorithm", "lsb")
        
        # ====================================================================
        # –≠–¢–ê–ü 3: –ü–û–î–ì–û–¢–û–í–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø
        # ====================================================================
        if algorithm == "lsb":
            depth = getattr(parent, "embedded_depth", parent.spinbox_depth.value())
            params = {"depth": depth}
        elif algorithm == "dct":
            strength = getattr(parent, "embedded_strength", parent.spinbox_strength.value())
            block_size = getattr(parent, "embedded_block_size", parent.spinbox_block_size.value())
            params = {"strength": strength, "block_size": block_size}
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")
        
        if secret_type == "text":
            params["length"] = getattr(parent, "embedded_secret_length", 10)
        elif secret_type == "image":
            params["secret_shape"] = getattr(parent, "embedded_secret_shape", (64, 64, 3))
        
        # ====================================================================
        # –≠–¢–ê–ü 4: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–ï–ö–†–ï–¢–ù–´–• –î–ê–ù–ù–´–•
        # ====================================================================
        extracted = extract(stego_image, params, method=algorithm)
        
        # ====================================================================
        # –≠–¢–ê–ü 5: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        # ====================================================================
        if isinstance(extracted, str):
            parent.extracted_secret = extracted
            parent.result_text.append(f"üîç –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            parent.restored_image_label.clear()
            parent.restored_image_label.setText("üìÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
            parent.restored_image_label.setStyleSheet("border: 2px solid #2196F3; color: #2196F3;")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            if hasattr(parent, 'original_secret') and isinstance(parent.original_secret, str):
                try:
                    metrics = calculate_text_metrics(parent.original_secret, extracted)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    if not metrics or not isinstance(metrics, dict):
                        raise ValueError("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
                    
                    formatted = format_text_metrics(metrics)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
                    parent.secret_metrics = formatted
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                    quality_desc = get_quality_description(metrics)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ–∫—Å—Ç—É (—É–∂–µ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–µ–≥–æ)
                    current_summary = parent.metrics_summary_text.toPlainText()
                    if current_summary:
                        parent.metrics_summary_text.append(f"\nüîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: {quality_desc}")
                    else:
                        parent.metrics_summary_text.setText(f"üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: {quality_desc}")
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                    parent.btn_show_metrics.setEnabled(True)
                    
                except Exception as metrics_error:
                    parent.result_text.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞: {metrics_error}")
                    parent.metrics_summary_text.append(f"\nüîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: ‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–∏
            original_shape = getattr(parent, "embedded_original_secret_shape", None)
            if original_shape and extracted.shape != original_shape:
                parent.result_text.append(f"‚ÑπÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {extracted.shape} (–±—ã–ª–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ {original_shape})")
                parent.result_text.append(f"üí° –°–æ–≤–µ—Ç: –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É")
            
            parent.extracted_secret = extracted
            parent.result_text.append(f"üîç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            img = Image.fromarray(extracted)
            import io
            buf = io.BytesIO()
            img.save(buf, format='PNG')
            buf.seek(0)
            pixmap = QPixmap()
            pixmap.loadFromData(buf.getvalue())
            parent.restored_image_label.setPixmap(pixmap)
            parent.restored_image_label.setStyleSheet("border: 2px solid #4CAF50;")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if hasattr(parent, 'original_secret') and isinstance(parent.original_secret, np.ndarray):
                try:
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    original_secret = parent.original_secret
                    if extracted.shape != original_secret.shape:
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        h_orig, w_orig = original_secret.shape[:2]
                        extracted_resized = cv2.resize(extracted, (w_orig, h_orig), interpolation=cv2.INTER_LINEAR)
                        metrics = calculate_image_metrics(original_secret, extracted_resized)
                        formatted = format_image_metrics(metrics)
                        formatted_with_note = (
                            f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞\n"
                            f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π {original_secret.shape} vs "
                            f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π {extracted.shape} ‚Üí –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω –¥–æ {extracted_resized.shape}\n\n" + 
                            formatted
                        )
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
                        parent.secret_metrics = formatted_with_note
                    else:
                        metrics = calculate_image_metrics(original_secret, extracted)
                        formatted = format_image_metrics(metrics)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
                        parent.secret_metrics = formatted
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                    quality_desc = get_quality_description(metrics)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ–∫—Å—Ç—É
                    current_summary = parent.metrics_summary_text.toPlainText()
                    if current_summary:
                        parent.metrics_summary_text.append(f"\nüîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: {quality_desc}")
                    else:
                        parent.metrics_summary_text.setText(f"üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: {quality_desc}")
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                    parent.btn_show_metrics.setEnabled(True)
                    
                except Exception as metrics_error:
                    parent.result_text.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {metrics_error}")
                    parent.metrics_summary_text.append(f"\nüîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: ‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        parent.btn_save_secret.setEnabled(True)
    except Exception as exc:
        parent.result_text.append(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {exc}")

def reset_gui(parent):
    """
    ========================================================================
    –°–ë–†–û–° –ò–ù–¢–ï–†–§–ï–ô–°–ê –ö –ò–°–•–û–î–ù–û–ú–£ –°–û–°–¢–û–Ø–ù–ò–Æ
    ========================================================================
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å" –∏ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ
    –ø–æ–ª—è, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    
    –ß—Ç–æ –æ—á–∏—â–∞–µ—Ç—Å—è:
    - –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    - –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª—É–±–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ 1 –±–∏—Ç—É
    - –û–∫–Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - –í—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ "—Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞".
    ========================================================================
    """
    # ====================================================================
    # –û–ß–ò–°–¢–ö–ê –ü–û–õ–ï–ô –í–í–û–î–ê –ò –ù–ê–°–¢–†–û–ï–ö
    # ====================================================================
    
    parent.result_text.clear()
    parent.spinbox_depth.setValue(1)
    parent.spinbox_strength.setValue(15)
    parent.spinbox_block_size.setValue(8)
    parent.combo_algo.setCurrentIndex(0)  # –í–µ—Ä–Ω—É—Ç—å –Ω–∞ LSB
    parent.cover_image_label.clear()
    parent.cover_image_label.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    parent.cover_image_label.setStyleSheet("border: 2px dashed #aaa; color: #666;")
    parent.secret_image_label.clear()
    parent.secret_image_label.setText("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    parent.secret_image_label.setStyleSheet("border: 2px dashed #aaa; color: #666;")
    parent.stego_image_label.clear()
    parent.stego_image_label.setText("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    parent.stego_image_label.setStyleSheet("border: 2px dashed #aaa; color: #666;")
    parent.restored_image_label.clear()
    parent.restored_image_label.setText("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    parent.restored_image_label.setStyleSheet("border: 2px dashed #aaa; color: #666;")
    
    # –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫
    parent.metrics_summary_text.clear()
    parent.btn_show_metrics.setEnabled(False)
    
    parent.btn_save_result.setEnabled(False)
    parent.btn_save_secret.setEnabled(False)
    attributes_to_clear = [
        'cover_path', 'wm_path', 'stego_result', 'embedded_secret_type', 
        'embedded_secret_length', 'embedded_secret_shape', 'embedded_depth', 
        'embedded_strength', 'embedded_block_size', 'embedded_algorithm',
        'embedded_original_secret_shape', 'secret_type', 'extracted_secret',
        'original_secret', 'stego_metrics', 'secret_metrics', 'embedded_text_encoding'
    ]
    for attr in attributes_to_clear:
        if hasattr(parent, attr):
            delattr(parent, attr)

# ========== –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–≥–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç ==========
def save_stego_result(parent):
    result = getattr(parent, 'stego_result', None)
    if result is None:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return
    fname, _ = QFileDialog.getSaveFileName(parent, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–≥–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "stego_result.png", "Images (*.png *.jpg *.bmp)")
    if fname:
        Image.fromarray(result).save(fname)
        parent.result_text.append(f"üíæ –°—Ç–µ–≥–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {fname}")

# ========== –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç ==========
def save_extracted_secret(parent):
    secret = getattr(parent, 'extracted_secret', None)
    secret_type = getattr(parent, 'embedded_secret_type', None)
    if secret is None or secret_type is None:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return
    if secret_type == "image":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        original_shape = getattr(parent, 'embedded_original_secret_shape', None)
        should_upscale = False
        
        if original_shape and secret.shape != original_shape:
            from PyQt5.QtWidgets import QMessageBox
            reply = QMessageBox.question(
                parent, 
                '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ', 
                f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–∏.\n'
                f'–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_shape}\n'
                f'–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {secret.shape}\n\n'
                f'–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É?',
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            should_upscale = (reply == QMessageBox.Yes)
        
        fname, _ = QFileDialog.getSaveFileName(parent, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "extracted_secret.png", "Images (*.png *.jpg *.bmp)")
        if fname:
            if should_upscale and original_shape:
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                img = Image.fromarray(secret)
                if len(original_shape) == 3:
                    img = img.resize((original_shape[1], original_shape[0]), Image.LANCZOS)
                else:
                    img = img.resize((original_shape[1], original_shape[0]), Image.LANCZOS)
                img.save(fname)
                parent.result_text.append(f"üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {fname}")
            else:
                Image.fromarray(secret).save(fname)
                parent.result_text.append(f"üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {fname}")
    elif secret_type == "text":
        fname, _ = QFileDialog.getSaveFileName(parent, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "extracted_secret.txt", "Text files (*.txt)")
        if fname:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É, —á—Ç–æ –±—ã–ª–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            encoding = getattr(parent, 'embedded_text_encoding', 'utf-8')
            with open(fname, 'w', encoding=encoding) as f:
                f.write(secret)
            parent.result_text.append(f"üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {fname} (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding})")
