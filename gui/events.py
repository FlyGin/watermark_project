# gui/events.py
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from PIL import Image
import numpy as np
import os
from watermark.embedding import embed
from watermark.extraction import extract

def connect_events(parent):
    parent.btn_load_cover.clicked.connect(lambda: load_cover_file(parent))
    parent.btn_load_wm.clicked.connect(lambda: load_wm_file(parent))
    parent.btn_embed.clicked.connect(lambda: embed_watermark(parent))
    parent.btn_extract.clicked.connect(lambda: extract_watermark(parent))
    parent.btn_reset.clicked.connect(lambda: reset_gui(parent))

def load_cover_file(parent):
    fname, _ = QFileDialog.getOpenFileName(parent, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª", "", "Images (*.png *.jpg *.bmp *.jpeg);;All Files (*)")
    if fname:
        parent.cover_path = fname
        parent.result_text.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {fname}")

def load_wm_file(parent):
    fname, _ = QFileDialog.getOpenFileName(parent, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞", "", "Images (*.png *.jpg *.bmp);;Text files (*.txt);;All Files (*)")
    if fname:
        parent.wm_path = fname
        parent.result_text.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {fname}")

def embed_watermark(parent):
    # LSB –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ
    cover_path = getattr(parent, "cover_path", None)
    wm_path = getattr(parent, "wm_path", None)
    text = parent.lineedit_wm.text().strip()

    if not cover_path:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª.")
        return
        
    if not wm_path and not text:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ (—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç).")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cover = np.array(Image.open(cover_path))
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–ª—É–±–∏–Ω—É –∏–∑ —Å–ø–∏–Ω–Ω–µ—Ä–∞
        depth = parent.spinbox_depth.value()
        params = {"depth": depth}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ–∫—Ä–µ—Ç–∞
        if text:  # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç
            secret = text
            parent.embedded_secret_type = "text"
            parent.embedded_secret_length = len(text.encode("utf-8"))
            parent.embedded_depth = depth  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≥–ª—É–±–∏–Ω—É
        elif wm_path:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª
            if os.path.splitext(wm_path)[1].lower() in [".jpg", ".jpeg", ".png", ".bmp"]:
                secret = np.array(Image.open(wm_path))
                parent.embedded_secret_type = "image"
                parent.embedded_secret_shape = secret.shape
                parent.embedded_depth = depth  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≥–ª—É–±–∏–Ω—É
            else:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                with open(wm_path, 'r', encoding='utf-8') as f:
                    secret = f.read()
                parent.embedded_secret_type = "text"
                parent.embedded_secret_length = len(secret.encode("utf-8"))
                parent.embedded_depth = depth  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≥–ª—É–±–∏–Ω—É

        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é LSB
        result = embed(cover, secret, params, method="lsb")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = "stego_result.png"
        Image.fromarray(result).save(output_path)
        parent.result_text.append(f"‚úÖ –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
        parent.stego_path = output_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        
    except Exception as exc:
        parent.result_text.append(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è: {exc}")
        

def extract_watermark(parent):
    # LSB –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    stego_path = getattr(parent, "stego_path", None) or getattr(parent, "cover_path", None)
    
    if not stego_path:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ –≤—Å—Ç—Ä–æ–µ–Ω–æ
    secret_type = getattr(parent, "embedded_secret_type", None)
    if not secret_type:
        QMessageBox.warning(parent, "–û—à–∏–±–∫–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –±—ã–ª–æ –≤—Å—Ç—Ä–æ–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ.")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–µ–≥–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        stego_image = np.array(Image.open(stego_path))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –≥–ª—É–±–∏–Ω—É –∏–ª–∏ —Ç–µ–∫—É—â—É—é –∏–∑ —Å–ø–∏–Ω–Ω–µ—Ä–∞
        depth = getattr(parent, "embedded_depth", parent.spinbox_depth.value())
        params = {"depth": depth}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–µ–∫—Ä–µ—Ç–∞
        if secret_type == "text":
            params["length"] = getattr(parent, "embedded_secret_length", 10)  # fallback
        elif secret_type == "image":
            params["secret_shape"] = getattr(parent, "embedded_secret_shape", (64, 64, 3))  # fallback
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º
        extracted = extract(stego_image, params, method="lsb")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(extracted, str):
            parent.result_text.append(f"üîç –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{extracted}'")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output_path = "extracted_secret.png"
            Image.fromarray(extracted).save(output_path)
            parent.result_text.append(f"üîç –ò–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            
    except Exception as exc:
        parent.result_text.append(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {exc}")

def reset_gui(parent):
    parent.lineedit_wm.clear()
    parent.result_text.clear()
    parent.spinbox_depth.setValue(1)  # –°–±—Ä–æ—Å –≥–ª—É–±–∏–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # –û—á–∏—â–∞–µ–º –ø—É—Ç–∏ –∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for attr in ['cover_path', 'wm_path', 'stego_path', 'embedded_secret_type', 
                 'embedded_secret_length', 'embedded_secret_shape', 'embedded_depth']:
        if hasattr(parent, attr):
            delattr(parent, attr)
