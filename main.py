import sys

def run_cli():
    import os
    import datetime
    import matplotlib.pyplot as plt
    import numpy as np
    from PIL import Image
    from watermark.embedding import embed
    from watermark.extraction import extract

    def run_basic_demo():
        print("\n--- –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---")
        print("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º:")
        print("1. LSB (Least Significant Bit)")
        print("2. DCT (Discrete Cosine Transform)")
        print("0. –ù–∞–∑–∞–¥")
        algo_choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
        
        if algo_choice == "0":
            return
        elif algo_choice == "1":
            method = "lsb"
            test_image = np.zeros((256, 256, 3), dtype=np.uint8)
            test_secret = "Hello, Stego!"
            params = {"depth": 1}
            print(f"\n–í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º–µ—Ç–æ–¥–æ–º LSB...")
            stego_image = embed(test_image, test_secret, params, method=method)
            print("–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–∞–∑–º–µ—Ä —Å—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", stego_image.shape)
            params["length"] = len(test_secret.encode("utf-8"))
            recovered_secret = extract(stego_image, params, method=method)
            print("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç:", recovered_secret)
        elif algo_choice == "2":
            method = "dct"
            test_image = np.random.randint(50, 200, (256, 256, 3), dtype=np.uint8)
            test_secret = "Hello, DCT Watermark!"
            params = {"strength": 10, "block_size": 8}
            print(f"\n–í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º–µ—Ç–æ–¥–æ–º DCT...")
            stego_image = embed(test_image, test_secret, params, method=method)
            print("–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–∞–∑–º–µ—Ä —Å—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", stego_image.shape)
            params["length"] = len(test_secret.encode("utf-8"))
            recovered_secret = extract(stego_image, params, method=method)
            print("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç:", recovered_secret)
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

    def run_dct_text_demo():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é DCT –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        print("\n=== DCT: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ===")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cover = np.random.randint(50, 200, (512, 512, 3), dtype=np.uint8)
        secret_text = "–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é DCT –∞–ª–≥–æ—Ä–∏—Ç–º–∞! üîí"
        
        print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {cover.shape}")
        print(f"–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç: '{secret_text}'")
        print(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(secret_text)} —Å–∏–º–≤–æ–ª–æ–≤ ({len(secret_text.encode('utf-8'))} –±–∞–π—Ç)")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
        strength = int(input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–ª—É –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 10-20): ") or "15")
        params = {"strength": strength, "block_size": 8}
        
        print("\n–í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ...")
        stego = embed(cover, secret_text, params, method="dct")
        print("‚úì –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
        print("\n–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ...")
        params["length"] = len(secret_text.encode("utf-8"))
        recovered = extract(stego, params, method="dct")
        recovered = recovered[:len(secret_text)]
        print(f"‚úì –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{recovered}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        if secret_text == recovered:
            print("\n‚úÖ –£–°–ü–ï–•! –¢–µ–∫—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ—á–Ω–æ.")
        else:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –¢–µ–∫—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏.")
            print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {sum(a == b for a, b in zip(secret_text, recovered))}/{len(secret_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        show_visual = input("\n–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é? (y/n): ")
        if show_visual.lower() == 'y':
            fig, axes = plt.subplots(1, 3, figsize=(15, 5))
            axes[0].imshow(cover)
            axes[0].set_title("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            axes[0].axis('off')
            
            axes[1].imshow(stego)
            axes[1].set_title(f"–°—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (DCT, strength={strength})")
            axes[1].axis('off')
            
            diff = np.abs(cover.astype(int) - stego.astype(int))
            axes[2].imshow(diff, cmap='hot')
            axes[2].set_title(f"–†–∞–∑–Ω–∏—Ü–∞ (–º–∞–∫—Å={diff.max()})")
            axes[2].axis('off')
            
            plt.tight_layout()
            plt.show()
    
    def run_dct_image_demo():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é DCT –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        print("\n=== DCT: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===")
        
        # –°–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cover = np.random.randint(50, 200, (512, 512, 3), dtype=np.uint8)
        secret = np.random.randint(0, 255, (16, 16), dtype=np.uint8)
        
        print(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {cover.shape}")
        print(f"–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {secret.shape}")
        print(f"–Å–º–∫–æ—Å—Ç—å: {(cover.shape[0]//8) * (cover.shape[1]//8)} –±–∏—Ç")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {secret.size * 8} –±–∏—Ç")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        strength = int(input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–ª—É –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 15-25): ") or "20")
        params = {"strength": strength, "block_size": 8}
        
        print("\n–í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ...")
        stego = embed(cover, secret, params, method="dct")
        print("‚úì –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
        print("\n–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ...")
        params["secret_shape"] = secret.shape
        recovered = extract(stego, params, method="dct")
        print(f"‚úì –ò–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {recovered.shape}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        mae = np.mean(np.abs(secret.astype(float) - recovered.astype(float)))
        mse = np.mean((secret.astype(float) - recovered.astype(float)) ** 2)
        psnr = 10 * np.log10(255**2 / mse) if mse > 0 else float('inf')
        
        print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"  MAE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞): {mae:.2f}")
        print(f"  MSE (—Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞): {mse:.2f}")
        print(f"  PSNR: {psnr:.2f} dB")
        
        if mae < 30:
            print("  ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!")
        elif mae < 50:
            print("  ‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        else:
            print("  ‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        show_visual = input("\n–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é? (y/n): ")
        if show_visual.lower() == 'y':
            fig, axes = plt.subplots(2, 3, figsize=(15, 10))
            
            axes[0, 0].imshow(cover)
            axes[0, 0].set_title("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            axes[0, 0].axis('off')
            
            axes[0, 1].imshow(stego)
            axes[0, 1].set_title(f"–°—Ç–µ–≥–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (strength={strength})")
            axes[0, 1].axis('off')
            
            diff_container = np.abs(cover.astype(int) - stego.astype(int))
            axes[0, 2].imshow(diff_container, cmap='hot')
            axes[0, 2].set_title(f"–†–∞–∑–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–º–∞–∫—Å={diff_container.max()})")
            axes[0, 2].axis('off')
            
            axes[1, 0].imshow(secret, cmap='gray')
            axes[1, 0].set_title("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            axes[1, 0].axis('off')
            
            axes[1, 1].imshow(recovered, cmap='gray')
            axes[1, 1].set_title(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ (MAE={mae:.2f})")
            axes[1, 1].axis('off')
            
            diff_secret = np.abs(secret.astype(int) - recovered.astype(int))
            axes[1, 2].imshow(diff_secret, cmap='hot')
            axes[1, 2].set_title(f"–†–∞–∑–Ω–∏—Ü–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ (–º–∞–∫—Å={diff_secret.max()})")
            axes[1, 2].axis('off')
            
            plt.tight_layout()
            plt.show()


    def run_integration_test_menu():
        while True:
            print("\n--- Integration tests ---")
            print("1. LSB: –í—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            print("2. LSB: –í—Å—Ç—Ä–æ–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            print("3. DCT: –î–µ–º–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
            print("4. DCT: –î–µ–º–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print("0. –ù–∞–∑–∞–¥")
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
            if choice == "1":
                from tests.integration_tests.text_demo import main_menu as main_menu_text_demo
                main_menu_text_demo()
            elif choice == "2":
                from tests.integration_tests.image_demo import run_demo as run_lsb_image_demo
                run_lsb_image_demo()
            elif choice == "3":
                run_dct_text_demo()
            elif choice == "4":
                run_dct_image_demo()
            elif choice == "0":
                return
            else:
                print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä.")

    def run_unit_test_menu():
        while True:
            print("\n--- Unit tests ---")
            print("1. LSB Text")
            print("2. LSB Image")
            print("3. DCT Text")
            print("4. DCT Image")
            print("5. –í—Å–µ LSB —Ç–µ—Å—Ç—ã")
            print("6. –í—Å–µ DCT —Ç–µ—Å—Ç—ã")
            print("7. –í—Å–µ Unit —Ç–µ—Å—Ç—ã")
            print("0. –ù–∞–∑–∞–¥")
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
            if choice == "1":
                os.system("python -m unittest tests.unit_tests.lsb_tests.test_lsb_text")
            elif choice == "2":
                os.system("python -m unittest tests.unit_tests.lsb_tests.test_lsb_image")
            elif choice == "3":
                os.system("python -m unittest tests.unit_tests.dct_tests.test_dct_text")
            elif choice == "4":
                os.system("python -m unittest tests.unit_tests.dct_tests.test_dct_image")
            elif choice == "5":
                os.system("python -m unittest discover -s tests.unit_tests.lsb_tests")
            elif choice == "6":
                os.system("python -m unittest discover -s tests.unit_tests.dct_tests")
            elif choice == "7":
                os.system("python -m unittest discover -s tests.unit_tests")
            elif choice == "0":
                return
            else:
                print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä.")

    def tests_menu():
        while True:
            print("\n--- –¢–µ—Å—Ç—ã ---")
            print("1. Integration tests")
            print("2. Unit tests")
            print("0. –ù–∞–∑–∞–¥")
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
            if choice == "1":
                run_integration_test_menu()
            elif choice == "2":
                run_unit_test_menu()
            elif choice == "0":
                return
            else:
                print("–û—à–∏–±–∫–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä.")

    def main_menu():
        while True:
            print("\n--- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---")
            print("1. –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä")
            print("2. –¢–µ—Å—Ç—ã")
            print("0. –í—ã—Ö–æ–¥")
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
            if choice == "1":
                run_basic_demo()
            elif choice == "2":
                tests_menu()
            elif choice == "0":
                sys.exit(0)
            else:
                print("–û—à–∏–±–∫–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä.")

    main_menu()

def run_gui():
    from gui.window import run
    run()

if __name__ == "__main__":
    if "--cli" in sys.argv:
        run_cli()
    else:
        run_gui()
